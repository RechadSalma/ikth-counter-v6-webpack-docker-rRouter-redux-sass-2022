20220204 - ikth-counter-v6-webpack-docker-rRouter-redux-sass-2022
================ MISSION
-version06: webpack / react / react-router / dockers / sass with bootstrap / netlify
-three routes:
	- / counter page with working buttons
	- /side whatever page to show path pages work with react router
	- /* error page
-working counter with redux
-use of SASS within my webpack template
-use of docker

================ LEFT OFF
-deploy on Heroku
	-not working on deployed using one docker. however I will google for example on how to deploy docker node js on heroku

================ DONE
-check for any outdated modules & update if any

-ensure page is working & on live server (netlify)
	-master branch
	-check package.json file is correct if still not working, particulary entry file "main"

-install normalize.css

-create three routes scaffold with react-router
	- / counter page
	- /side whatever page
	- /* error page

-create layout for each route (eg. header / footer)

-create links for all routes in header component

-create counter component scaffold with display number & its three buttons (increment/decrement/reset)
	-do not worry about the logic as we will do that with redux action creators

-implement SASS to routes
	-install sass
	-create global sass
	-create individual component sass

-implement redux to the counter component
	-setup redux first with store & reducers
	-implement @redux-devtools/extension
	-implement redux-thunk
	-use counter state for CounterDisplay component
	-create action creators
	-connect the action creators to the buttons

-re-insert iKmanifestDir/iKdummyManifest.txt back to the src/ because there is error in Netlify deployment due to npm run build has specific commands to include iKmanifesDir/

-configure netlify configuration file (netlify.toml) to redirect all static routes (react-router) instead of using the typical _redirects file we used before
	-you can set up your build too & etc

-add image to /side & optimize it
	-try to ensure it is optimized using webpack loaders/plugins
	-Used image-minimizer-webpack-plugin / Imagemin / imagemin-mozjpeg plugins to compress my jpeg image of the lizard
		-I compress image from 232kb to 11kb using only 5% quality

-README.md file

-include netlify form submission as contact form
	-create /form route for the contact form
	-create form link on header
	-check out doc on how to do it the way Netlify needs it to be
	-create contact form component
		-name
		-email
		-message
		-submit button
	-git commit & test if form submission is working accordingly

-check up on snyk recommendations

-update README.md with form submission /form

-git commit & see netlify deploy
	-test form submission is working accordingly
	-check synk result has improved

================ TODO
-dockers
	-create dockerfile
		-Dockerfile for production
			-build image with tag
			-run container with port
-deploy on Heroku
	-sign up to Heroku
	-deploy one Dockerfile image using the nodejs server (./src/server.js)

-Dockerfile.dev for development

-create docker compose
	-set up nodejs server
	-set up volume


-use docker repository
	-docker push your image

-redeploy the docker repo version on Heroku

================ COME BACK

================ WRITE IN YOUR NOTE DOC
-docker under best practice section create a basic steps to creating docker image using cli. Because it got a bit confusing when I came back to dockers after a long time

- docker run -p anyPortNumber:exposePortNumber docContainerTagName
	- docker run -p 4000:3000 ikdoc
		-iKVIP localhost server (hostport server) only works with nodejs server & not webpack dev server
	-VIP in Dockerfile EXPOSE property must be the same as the nodejs server port for it to work	
		-eg nodejs is localhost:3000 , than so must be EXPOSE 3000
	-insert the notes in a best practice section

heroku basic usage
	-deploying simple Dockerfile image with nodejs
		

================ PLAYGROUND
docker build -t doc .

